/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as AuthRouteImport } from './routes/_auth/route'
import { Route as IndexImport } from './routes/index'
import { Route as PostsLayoutImport } from './routes/posts/_layout'
import { Route as AuthSignUpImport } from './routes/_auth/sign-up'
import { Route as AuthSignInImport } from './routes/_auth/sign-in'
import { Route as PostsLayoutIndexImport } from './routes/posts/_layout.index'
import { Route as PostsLayoutPostIdImport } from './routes/posts/_layout.$postId'
import { Route as PostsPostIdDeepImport } from './routes/posts/$postId.deep'

// Create Virtual Routes

const PostsImport = createFileRoute('/posts')()

// Create/Update Routes

const PostsRoute = PostsImport.update({
  id: '/posts',
  path: '/posts',
  getParentRoute: () => rootRoute,
} as any)

const AuthRouteRoute = AuthRouteImport.update({
  id: '/_auth',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const PostsLayoutRoute = PostsLayoutImport.update({
  id: '/_layout',
  getParentRoute: () => PostsRoute,
} as any)

const AuthSignUpRoute = AuthSignUpImport.update({
  id: '/sign-up',
  path: '/sign-up',
  getParentRoute: () => AuthRouteRoute,
} as any)

const AuthSignInRoute = AuthSignInImport.update({
  id: '/sign-in',
  path: '/sign-in',
  getParentRoute: () => AuthRouteRoute,
} as any)

const PostsLayoutIndexRoute = PostsLayoutIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => PostsLayoutRoute,
} as any)

const PostsLayoutPostIdRoute = PostsLayoutPostIdImport.update({
  id: '/$postId',
  path: '/$postId',
  getParentRoute: () => PostsLayoutRoute,
} as any)

const PostsPostIdDeepRoute = PostsPostIdDeepImport.update({
  id: '/$postId/deep',
  path: '/$postId/deep',
  getParentRoute: () => PostsRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/_auth': {
      id: '/_auth'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AuthRouteImport
      parentRoute: typeof rootRoute
    }
    '/_auth/sign-in': {
      id: '/_auth/sign-in'
      path: '/sign-in'
      fullPath: '/sign-in'
      preLoaderRoute: typeof AuthSignInImport
      parentRoute: typeof AuthRouteImport
    }
    '/_auth/sign-up': {
      id: '/_auth/sign-up'
      path: '/sign-up'
      fullPath: '/sign-up'
      preLoaderRoute: typeof AuthSignUpImport
      parentRoute: typeof AuthRouteImport
    }
    '/posts': {
      id: '/posts'
      path: '/posts'
      fullPath: '/posts'
      preLoaderRoute: typeof PostsImport
      parentRoute: typeof rootRoute
    }
    '/posts/_layout': {
      id: '/posts/_layout'
      path: '/posts'
      fullPath: '/posts'
      preLoaderRoute: typeof PostsLayoutImport
      parentRoute: typeof PostsRoute
    }
    '/posts/$postId/deep': {
      id: '/posts/$postId/deep'
      path: '/$postId/deep'
      fullPath: '/posts/$postId/deep'
      preLoaderRoute: typeof PostsPostIdDeepImport
      parentRoute: typeof PostsImport
    }
    '/posts/_layout/$postId': {
      id: '/posts/_layout/$postId'
      path: '/$postId'
      fullPath: '/posts/$postId'
      preLoaderRoute: typeof PostsLayoutPostIdImport
      parentRoute: typeof PostsLayoutImport
    }
    '/posts/_layout/': {
      id: '/posts/_layout/'
      path: '/'
      fullPath: '/posts/'
      preLoaderRoute: typeof PostsLayoutIndexImport
      parentRoute: typeof PostsLayoutImport
    }
  }
}

// Create and export the route tree

interface AuthRouteRouteChildren {
  AuthSignInRoute: typeof AuthSignInRoute
  AuthSignUpRoute: typeof AuthSignUpRoute
}

const AuthRouteRouteChildren: AuthRouteRouteChildren = {
  AuthSignInRoute: AuthSignInRoute,
  AuthSignUpRoute: AuthSignUpRoute,
}

const AuthRouteRouteWithChildren = AuthRouteRoute._addFileChildren(
  AuthRouteRouteChildren,
)

interface PostsLayoutRouteChildren {
  PostsLayoutPostIdRoute: typeof PostsLayoutPostIdRoute
  PostsLayoutIndexRoute: typeof PostsLayoutIndexRoute
}

const PostsLayoutRouteChildren: PostsLayoutRouteChildren = {
  PostsLayoutPostIdRoute: PostsLayoutPostIdRoute,
  PostsLayoutIndexRoute: PostsLayoutIndexRoute,
}

const PostsLayoutRouteWithChildren = PostsLayoutRoute._addFileChildren(
  PostsLayoutRouteChildren,
)

interface PostsRouteChildren {
  PostsLayoutRoute: typeof PostsLayoutRouteWithChildren
  PostsPostIdDeepRoute: typeof PostsPostIdDeepRoute
}

const PostsRouteChildren: PostsRouteChildren = {
  PostsLayoutRoute: PostsLayoutRouteWithChildren,
  PostsPostIdDeepRoute: PostsPostIdDeepRoute,
}

const PostsRouteWithChildren = PostsRoute._addFileChildren(PostsRouteChildren)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '': typeof AuthRouteRouteWithChildren
  '/sign-in': typeof AuthSignInRoute
  '/sign-up': typeof AuthSignUpRoute
  '/posts': typeof PostsLayoutRouteWithChildren
  '/posts/$postId/deep': typeof PostsPostIdDeepRoute
  '/posts/$postId': typeof PostsLayoutPostIdRoute
  '/posts/': typeof PostsLayoutIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '': typeof AuthRouteRouteWithChildren
  '/sign-in': typeof AuthSignInRoute
  '/sign-up': typeof AuthSignUpRoute
  '/posts': typeof PostsLayoutIndexRoute
  '/posts/$postId/deep': typeof PostsPostIdDeepRoute
  '/posts/$postId': typeof PostsLayoutPostIdRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/_auth': typeof AuthRouteRouteWithChildren
  '/_auth/sign-in': typeof AuthSignInRoute
  '/_auth/sign-up': typeof AuthSignUpRoute
  '/posts': typeof PostsRouteWithChildren
  '/posts/_layout': typeof PostsLayoutRouteWithChildren
  '/posts/$postId/deep': typeof PostsPostIdDeepRoute
  '/posts/_layout/$postId': typeof PostsLayoutPostIdRoute
  '/posts/_layout/': typeof PostsLayoutIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | ''
    | '/sign-in'
    | '/sign-up'
    | '/posts'
    | '/posts/$postId/deep'
    | '/posts/$postId'
    | '/posts/'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | ''
    | '/sign-in'
    | '/sign-up'
    | '/posts'
    | '/posts/$postId/deep'
    | '/posts/$postId'
  id:
    | '__root__'
    | '/'
    | '/_auth'
    | '/_auth/sign-in'
    | '/_auth/sign-up'
    | '/posts'
    | '/posts/_layout'
    | '/posts/$postId/deep'
    | '/posts/_layout/$postId'
    | '/posts/_layout/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AuthRouteRoute: typeof AuthRouteRouteWithChildren
  PostsRoute: typeof PostsRouteWithChildren
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AuthRouteRoute: AuthRouteRouteWithChildren,
  PostsRoute: PostsRouteWithChildren,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/_auth",
        "/posts"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/_auth": {
      "filePath": "_auth/route.tsx",
      "children": [
        "/_auth/sign-in",
        "/_auth/sign-up"
      ]
    },
    "/_auth/sign-in": {
      "filePath": "_auth/sign-in.tsx",
      "parent": "/_auth"
    },
    "/_auth/sign-up": {
      "filePath": "_auth/sign-up.tsx",
      "parent": "/_auth"
    },
    "/posts": {
      "filePath": "posts",
      "children": [
        "/posts/_layout",
        "/posts/$postId/deep"
      ]
    },
    "/posts/_layout": {
      "filePath": "posts/_layout.tsx",
      "parent": "/posts",
      "children": [
        "/posts/_layout/$postId",
        "/posts/_layout/"
      ]
    },
    "/posts/$postId/deep": {
      "filePath": "posts/$postId.deep.tsx",
      "parent": "/posts"
    },
    "/posts/_layout/$postId": {
      "filePath": "posts/_layout.$postId.tsx",
      "parent": "/posts/_layout"
    },
    "/posts/_layout/": {
      "filePath": "posts/_layout.index.tsx",
      "parent": "/posts/_layout"
    }
  }
}
ROUTE_MANIFEST_END */
